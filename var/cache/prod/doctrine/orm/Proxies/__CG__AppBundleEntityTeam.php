<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Team extends \AppBundle\Entity\Team implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'idPlayerA', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'idPlayerB', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'team_a_game', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'team_b_game', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'player_a', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'player_b'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'idPlayerA', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'idPlayerB', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'team_a_game', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'team_b_game', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'player_a', '' . "\0" . 'AppBundle\\Entity\\Team' . "\0" . 'player_b'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Team $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdPlayerA($idPlayerA)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdPlayerA', [$idPlayerA]);

        return parent::setIdPlayerA($idPlayerA);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdPlayerA()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdPlayerA', []);

        return parent::getIdPlayerA();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdPlayerB($idPlayerB)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdPlayerB', [$idPlayerB]);

        return parent::setIdPlayerB($idPlayerB);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdPlayerB()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdPlayerB', []);

        return parent::getIdPlayerB();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function addTeamAGame(\AppBundle\Entity\Game $teamAGame)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTeamAGame', [$teamAGame]);

        return parent::addTeamAGame($teamAGame);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTeamAGame(\AppBundle\Entity\Game $teamAGame)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTeamAGame', [$teamAGame]);

        return parent::removeTeamAGame($teamAGame);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamAGame()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamAGame', []);

        return parent::getTeamAGame();
    }

    /**
     * {@inheritDoc}
     */
    public function addTeamBGame(\AppBundle\Entity\Game $teamBGame)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTeamBGame', [$teamBGame]);

        return parent::addTeamBGame($teamBGame);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTeamBGame(\AppBundle\Entity\Game $teamBGame)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTeamBGame', [$teamBGame]);

        return parent::removeTeamBGame($teamBGame);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamBGame()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamBGame', []);

        return parent::getTeamBGame();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlayerA(\AppBundle\Entity\Player $playerA = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlayerA', [$playerA]);

        return parent::setPlayerA($playerA);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayerA()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayerA', []);

        return parent::getPlayerA();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlayerB(\AppBundle\Entity\Player $playerB = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlayerB', [$playerB]);

        return parent::setPlayerB($playerB);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayerB()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayerB', []);

        return parent::getPlayerB();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
