<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Game extends \AppBundle\Entity\Game implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'idRound', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'idTeamA', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'idTeamB', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'teamAScore', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'teamBScore', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'round', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'team_a', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'team_b'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'idRound', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'idTeamA', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'idTeamB', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'teamAScore', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'teamBScore', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'round', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'team_a', '' . "\0" . 'AppBundle\\Entity\\Game' . "\0" . 'team_b'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Game $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdRound($idRound)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdRound', [$idRound]);

        return parent::setIdRound($idRound);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdRound()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdRound', []);

        return parent::getIdRound();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdTeamA($idTeamA)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdTeamA', [$idTeamA]);

        return parent::setIdTeamA($idTeamA);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdTeamA()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdTeamA', []);

        return parent::getIdTeamA();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdTeamB($idTeamB)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdTeamB', [$idTeamB]);

        return parent::setIdTeamB($idTeamB);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdTeamB()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdTeamB', []);

        return parent::getIdTeamB();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeamAScore($teamAScore)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeamAScore', [$teamAScore]);

        return parent::setTeamAScore($teamAScore);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamAScore()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamAScore', []);

        return parent::getTeamAScore();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeamBScore($teamBScore)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeamBScore', [$teamBScore]);

        return parent::setTeamBScore($teamBScore);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamBScore()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamBScore', []);

        return parent::getTeamBScore();
    }

    /**
     * {@inheritDoc}
     */
    public function setRound(\AppBundle\Entity\Round $round = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRound', [$round]);

        return parent::setRound($round);
    }

    /**
     * {@inheritDoc}
     */
    public function getRound()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRound', []);

        return parent::getRound();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeamA(\AppBundle\Entity\Team $teamA = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeamA', [$teamA]);

        return parent::setTeamA($teamA);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamA()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamA', []);

        return parent::getTeamA();
    }

    /**
     * {@inheritDoc}
     */
    public function setTeamB(\AppBundle\Entity\Team $teamB = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeamB', [$teamB]);

        return parent::setTeamB($teamB);
    }

    /**
     * {@inheritDoc}
     */
    public function getTeamB()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeamB', []);

        return parent::getTeamB();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
